/*
 * DEVS Streaming Framework Java Copyright (C) 2024 simlytics.cloud LLC and
 * DEVS Streaming Framework Java contributors.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */

package example.coordinator;

import devs.OutputCouplingHandler;
import devs.msg.PortValue;
import example.generator.GeneratorModel;
import example.storage.StorageModel;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * A specific implementation of the {@link OutputCouplingHandler} class that manages the coupling
 * between the output of a generator model and the input of a storage model.
 * <p>
 * This class is specifically designed to handle the output messages from the generator model,
 * extract the appropriate port value, and route it to the correct input port of the storage model.
 * It uses predefined filters during initialization to focus on messages emitted by the generator
 * model.
 */
public class GenStoreOutputCouplingHandler extends OutputCouplingHandler {


  /**
   * Constructs a new {@code GenStoreOutputCouplingHandler} that is specifically tailored to manage
   * output couplings for a GenStore coordinator in a DEVS model coordination system.
   * <p>
   * This constructor initializes the handler with predefined filters, ensuring that it is only
   * concerned with outputs from the generator model. It sets the sender filter to "generator",
   * while leaving the class filter and port identifier filter unset.
   * <p>
   * The {@code GenStoreOutputCouplingHandler} facilitates routing output messages from the
   * generator to the corresponding input of the storage model, enabling seamless communication and
   * coordination between the two models. This class ensures that the appropriate port values are
   * extracted and routed as expected within the system.
   */
  public GenStoreOutputCouplingHandler() {
    super(Optional.empty(), Optional.of("generator"), Optional.empty());
  }

  /**
   * Handles the transfer of a {@link PortValue} from the generator model to the storage model by
   * converting the output port value of the generator into an input port value for the storage
   * model and updating the receiver map accordingly.
   *
   * @param sender         the identifier of the sender, typically the generator model in this
   *                       context
   * @param portValue      the {@link PortValue} received from the sender, containing the output
   *                       data of the generator model
   * @param receiverMap    a mapping between model identifiers and their respective lists of port
   *                       values, used to distribute input values to the appropriate models
   * @param outputMessages a list of output messages generated by the system; unused in this
   *                       implementation
   */
  @Override
  public void handlePortValue(String sender, PortValue<?> portValue,
      Map<String, List<PortValue<?>>> receiverMap, List<PortValue<?>> outputMessages) {
    PortValue<Integer> inputPortValue = StorageModel.storageInputPort
        .createPortValue(GeneratorModel.generatorOutputPort.getValue(portValue));
    addInputPortValue(inputPortValue, StorageModel.MODEL_ID, receiverMap);
  }
}
