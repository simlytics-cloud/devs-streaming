/*
 * DEVS Streaming Framework Java Copyright (C) 2024 simlytics.cloud LLC and
 * DEVS Streaming Framework Java contributors.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *
 */

package devs.simulation.recorder;

import devs.PDEVSModel;
import devs.Port;
import devs.msg.Bag;
import devs.msg.time.LongSimTime;
import example.storage.StorageStateEnum;

/**
 * The RecorderModel class is a specialized implementation of a PDEVS (Parallel Discrete Event
 * System Specification) atomic model. It extends PDEVSModel with a specific time type of
 * LongSimTime and a Void internal state type. This model is responsible for defining the DEVS
 * functions: internal state transition, external state transition, confluent state transition, time
 * advance, and output generation.
 */
public class RecorderModel extends PDEVSModel<LongSimTime, Void> {

  /**
   * Represents an output port that delivers storage-related state updates from a model. The port is
   * defined with a unique identifier ("STORAGE_OUTPUT") and uses the {@link StorageStateEnum} class
   * to specify the type of state values it accepts.
   * <p>
   * This port is commonly used in the context of the DEVS modeling framework to facilitate
   * communication of storage states between models. It serves as an intermediary for transmitting
   * storage state information, which is represented by predefined states in the
   * {@link StorageStateEnum} enumeration.
   * <p>
   * In the simulation framework, this port can interact with other components to emit storage state
   * messages as part of output behavior or coupling configurations.
   */
  public static final Port<String> storageOutput = new Port<>("STORAGE_OUTPUT",
      String.class);
  /**
   * Represents an output port for generating integer-based output values within the DEVS (Discrete
   * Event System Specification) simulation framework. The port is uniquely identified with the
   * identifier "GENERATOR_OUTPUT" and uses the {@link Integer} class to specify the data type it
   * handles.
   * <p>
   * This port is utilized in the context of the DEVS modeling framework, where it facilitates
   * communication of integer values between models. Typically, it captures and transmits output
   * signals generated by the associated model for further processing or coupling with other
   * models.
   * <p>
   * As part of the RecorderModel implementation, this port serves as a medium to send integer-based
   * output data routed from a generator source (e.g., GeneratorModel) to the RecorderModel or other
   * components in the simulation system.
   */
  public static Port<Integer> generatorOutput = new Port<>("GENERATOR_OUTPUT", Integer.class);

  /**
   * Constructs an instance of the RecorderModel, which inherits behavior from the PDEVSModel.
   *
   * @param sender a unique identifier for this model instance, typically representing the source
   *               that interacts with this RecorderModel.
   */
  public RecorderModel(String sender) {
    super(null, sender);
  }

  @Override
  public void internalStateTransitionFunction(LongSimTime currentTime) {
    return;
  }

  @Override
  public void externalStateTransitionFunction(LongSimTime currentTime, Bag input) {
    return;
  }

  @Override
  public void confluentStateTransitionFunction(LongSimTime currentTime, Bag input) {
    return;
  }

  /**
   * Determines the time to the next internal event by returning a LongSimTime instance with maximum
   * time value.
   *
   * @param currentTime the current simulation time
   * @return a LongSimTime instance representing the maximum possible simulation time
   */
  @Override
  public LongSimTime timeAdvanceFunction(LongSimTime currentTime) {
    return LongSimTime.builder().t(Long.MAX_VALUE).build().minus(currentTime);
  }

  @Override
  public Bag outputFunction() {
    return Bag.builder().build();
  }
}
