
pekko {
  log-level = "DEBUG"

  actor {
    // serialize-messages = on

    debug {
      unhandled = on
      event-stream = on
    }

    serializers {
      jackson-json = "org.apache.pekko.serialization.jackson.JacksonJsonSerializer"
    }

    serialization-bindings {
      "devs.msg.DevsMessage" = "jackson-json"
      "devs.msg.time.SimTime" = "jackson-json"
    }
  }
  serialization.jackson {
    jackson-json {
      serialization-features {
        INDENT_OUTPUT = on
      }
    }

    jackson-modules += "com.fasterxml.jackson.datatype.jdk8.Jdk8Module"
    jackson-modules += "com.fasterxml.jackson.datatype.guava.GuavaModule"
  }
}

  kafka-cluster {
    bootstrap.servers = "pkc-2396y.us-east-1.aws.confluent.cloud:9092"
    security.protocol = SASL_SSL
    sasl.jaas.config = "org.apache.kafka.common.security.plain.PlainLoginModule   required username='ZUGJB5NVWUO54D6T'   password='FsLpugdXoxIe4dGrw6ZxNok2vuNOi0mc3ZRhY+s9JPxeg5I2GQjoKVY0ROy2UAor';"
    sasl.mechanism = PLAIN
  }

  mca {
    mcAgentsTopic = mc-agents
    scenarioTopic = scenarios
    webLvcTopic = weblvc
    webLvcCheckIntervalSeconds = 5
    globalElevationData = "data/razish10m.bin"
    mongoHttpEnvironmentUrl = "https://nvesd-msaas.simlytics.cloud/mongohttp/cosmos-msaas/?database=environment&collection=razish-geojson"
    mongoHttpToken = "nvesd:own-the-n1ght"
  }

  kafka-readall-consumer: ${pekko.kafka.consumer} {
    kafka-clients {
      bootstrap.servers = "pkc-2396y.us-east-1.aws.confluent.cloud:9092"
      security.protocol = SASL_SSL
      sasl.jaas.config = "org.apache.kafka.common.security.plain.PlainLoginModule   required username='ZUGJB5NVWUO54D6T'   password='FsLpugdXoxIe4dGrw6ZxNok2vuNOi0mc3ZRhY+s9JPxeg5I2GQjoKVY0ROy2UAor';"
      sasl.mechanism = PLAIN
      enable.auto.commit = false
      auto.offset.reset = earliest
    }
  }


